"""
Django settings for shopping project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# This key is shared with account services for JWT.
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get("DEBUG", "0")))

# DJANGO_ALLOWED_HOSTS is a single string of hosts with a space between each.
# For example: DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
# [::1] is loopback address in ipv6, equivalent to 127.0.0.1 in ipv4.
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")

# since 4.0
# DJANGO_CSRF_TRUSTED_ORIGINS is a single string of hosts with a space between each.
# For example: DJANGO_CSRF_TRUSTED_ORIGINS=http://localhost http://127.0.0.1
CSRF_TRUSTED_ORIGINS = os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS").split(" ")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Turn on GeoDjango.
    "django.contrib.gis",
    "product",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "shopping.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "shopping.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

# Migrate after setting models.
# python manage.py makemigrations
# python manage.py migrate

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
# needed for collectstatic
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# To easily get csrftoken for fetch.
# Include {% csrf_token %} in html,
# Add 'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value into headers
CSRF_USE_SESSIONS = True

# Celery Configuration Options.
# # Assuming RabbitMQ and Redis are running, run these
# # commands in order.
# python manage.py runserver
# celery -A shopping worker -l info
# # Only if using beat for scheduling, such as handling
# # result_expires.
# celery -A shopping beat -l info ...

# Let celery use TIME_ZONE, otherwise setting expires
# might cause immediate revoking.
# This is default action thus not really necessary. Turning
# this on/off both shows occasional immediate revoking.
# CELERY_TIMEZONE = TIME_ZONE

# Overall soft time limit: 9 minutes. SoftTimeLimitExceeded
# exception will be raised so that certain procedure can
# be executed before task is killed. Can be specified per
# task.
CELERY_TASK_SOFT_TIME_LIMIT = 9 * 60
# Overall hard time limit: 10 minutes. The task will be
# killed then. Can be specified per task.
CELERY_TASK_TIME_LIMIT = 10 * 60

# Disable prefetching.
CELERY_WORKER_PREFETCH_MULTIPLIER = 1

# Run synchronously for testing and debugging.
# CELERY_TASK_ALWAYS_EAGER = True

# "transport://username:password@hostname:port/virtual_host"
CELERY_BROKER_URL = "amqp://{}:{}@{}:{}/{}".format(
    os.environ.get("RABBITMQ_DEFAULT_USER"),
    os.environ.get("RABBITMQ_DEFAULT_PASS"),
    os.environ.get("RABBITMQ_HOST"),
    os.environ.get("RABBITMQ_NODE_PORT"),
    os.environ.get("RABBITMQ_DEFAULT_VHOST"),
)
# "redis://username:password@hostname:port/db"
CELERY_RESULT_BACKEND = "redis://{}:{}@{}:{}/{}".format(
    os.environ.get("REDIS_USER"),
    os.environ.get("REDIS_PASSWORD"),
    os.environ.get("REDIS_HOST"),
    os.environ.get("REDIS_PORT"),
    os.environ.get("REDIS_DB"),
)
# A built-in periodic task will delete the results
# after this time (celery.backend_cleanup), assuming
# that celery beat is enabled. The task runs daily
# at 4am.
CELERY_RESULT_EXPIRES = 12 * 60 * 60

# Setup queues manually.
# Not needed if CELERY_TASK_CREATE_MISSING_QUEUES
# is True (by default).
# celery -A shopping worker -l info -> [queues]: celery
# celery -A shopping worker -l info -Q fast -> [queues]: fast
# CELERY_TASK_QUEUES = {
#     "fast": {
#         "exchange": "fast",
#         "routing_key": "fast",
#     },
#     "slow": {
#         "exchange": "slow",
#         "routing_key": "slow",
#     },
# }
# When manual CELERY_TASK_QUEUES is set, things change.
# celery -A shopping worker -l info
#   -> [queues]: fast and slow
# celery -A shopping worker -l info -Q fast
#   -> [queues]: fast
CELERY_TASK_QUEUES = {
    # The default queue for tasks is celery. Either keep
    # it or set CELERY_TASK_DEFAULT_QUEUE = "fast"
    "celery": {
        "exchange": "celery",
        "routing_key": "celery",
    },
    "fast": {
        "exchange": "fast",
        "routing_key": "fast",
    },
    "slow": {
        "exchange": "slow",
        "routing_key": "slow",
    },
}
# celery -A shopping worker -l info
#   -> [queues]: celery, fast and slow

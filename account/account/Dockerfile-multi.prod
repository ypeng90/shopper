#####BUILDER#####


# Pull official base image.
FROM python:3.8-buster as builder

# Prevents Python from writing .pyc files,
# equivalent to python -B.
ENV PYTHONDONTWRITEBYTECODE=1
# Prevents Python from buffering stdout and 
# stderr, equivalent to python -u.
ENV PYTHONUNBUFFERED=1

# Set work directory, create if not existing.
WORKDIR /build

# Install Python dependencies.
RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /build/wheels -r requirements.txt


#####FINAL#####


# Pull official base image.
FROM python:3.8-buster

# Prevents Python from writing .pyc files,
# equivalent to python -B.
ENV PYTHONDONTWRITEBYTECODE=1
# Prevents Python from buffering stdout and
# stderr, equivalent to python -u.
ENV PYTHONUNBUFFERED=1

# Create user app.
# RUN addgroup -S app && adduser -S app -G app
RUN addgroup app && adduser --ingroup app app

# Set work directory, create if not existing.
WORKDIR /home/app

# Install system dependencies.
RUN apt update && apt install -y netcat

# Install Python dependencies.
COPY --from=builder /build/requirements.txt .
COPY --from=builder /build/wheels /wheels
RUN pip install --no-cache /wheels/*

# Copy project.
COPY . .

# Replace CR, carriage return character (\r or ^M), with ''.
# -i: edit in place; $//g: only replace CR right before '\n'
RUN sed -i "s/\r$//g" entrypoint.prod.sh
RUN chmod +x  entrypoint.prod.sh

# Change ownership of all files to user app.
RUN chown -R app:app .

# change to user app.
USER app

# run entrypoint.sh
ENTRYPOINT ["/home/app/entrypoint.prod.sh"]